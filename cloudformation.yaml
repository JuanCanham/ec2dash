AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Api & Side For describing EC2 instance info

Parameters:
  Domain:
    Type: String
    AllowedPattern: '[a-zA-Z0-9-.]{1,63}'
  DeployCertificates:
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'true'

Conditions:
  DeployCertificates: !Equals [!Ref DeployCertificates, 'true']

Resources:
  Api:
    Condition: DeployCertificates
    Type: AWS::Serverless::HttpApi
    Properties:
      FailOnWarnings: true
      AccessLogSettings:
        DestinationArn: !GetAtt ApiAccessLogs.Arn
        Format: $context.requestId,$context.requestTime,$context.resourcePath,$context.identity.caller,$context.identity.sourceIp
      Domain:
        CertificateArn: !Ref ApiCertificate
        DomainName: !Sub 'api.${Domain}'
        Route53:
          HostedZoneId: !Ref HostedZone
          IpV6: true
      CorsConfiguration:
        AllowCredentials: true
        AllowHeaders:
          - Authorization
        AllowMethods:
          - GET
        AllowOrigins:
          - !Sub https://${Domain}
      Auth:
        DefaultAuthorizer: JwtAuthorizer
        Authorizers:
          JwtAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
              audience:
               - !Ref UserPoolClient

  ApiAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 90

  ApiCertificate:
    Condition: DeployCertificates
    DependsOn: CAARecords
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub api.${Domain}
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub api.${Domain}
          HostedZoneId: !Ref HostedZone

  RootCertificate:
    Condition: DeployCertificates
    DependsOn: CAARecords
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref Domain
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref Domain
          HostedZoneId: !Ref HostedZone

  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref Domain

  CAARecords:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref Domain
      Type: CAA
      TTL: 3600
      ResourceRecords:
        - 0 issue "amazon.com"
        - 0 issue "amazontrust.com"
        - 0 issue "awstrust.com"
        - 0 issue "amazonaws.com"
        - 0 issue ";"

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      Policies:
        PasswordPolicy:
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          MinimumLength: 8
      UserPoolAddOns:
        AdvancedSecurityMode: AUDIT
      MfaConfiguration: OPTIONAL
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - aws.cognito.signin.user.admin
        - openid
        - email
      UserPoolId: !Ref UserPool
      PreventUserExistenceErrors: ENABLED
      GenerateSecret: true
      CallbackURLs:
        - !Sub https://${Domain}
      LogoutURLs:
        - !Sub https://${Domain}
      SupportedIdentityProviders:
        - COGNITO

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Select [0, !Split [., !Ref Domain]]
      UserPoolId: !Ref UserPool

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref Domain

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: GetOriginAccessIdentity
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessIdentity}
            Action: s3:GetObject
            Resource: !Sub '${Bucket.Arn}/*'

  Route53RecordIPv4:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt CloudfrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId: !Ref HostedZone
      Name: !Ref Domain
      Type: A

  Route53RecordIPv6:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt CloudfrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId: !Ref HostedZone
      Name: !Ref Domain
      Type: AAAA

  CloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases: !If [DeployCertificates, [!Ref Domain], !Ref AWS::NoValue]
        Enabled: true
        IPV6Enabled: true
        PriceClass: PriceClass_100
        ViewerCertificate: !If
          - DeployCertificates
          - AcmCertificateArn: !Ref RootCertificate
            SslSupportMethod: sni-only
          - !Ref AWS::NoValue
        Origins:
          - Id: s3origin
            DomainName: !GetAtt Bucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          DefaultTTL: 900
          TargetOriginId: s3origin
          ViewerProtocolPolicy: allow-all
          Compress: True
          ForwardedValues:
            QueryString: False

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub OriginAccessIdentity for ${Domain}

  DescribeInstancesFunction:
    Condition: DeployCertificates
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.9
      Handler: main.main
      InlineCode: |
        def main(event, context):
          msg = "Build template with make all, package or package-cfn"
          print(msg)
          print(f"invoked with ${event} ${context}")
          return {
            "statusCode": 500,
            "body": msg
          }
      Events:
        HttpApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: GET
            Path: /
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'
            - Effect: Allow
              Action: ec2:DescribeInstances
              Resource: '*'

  DeploymentUser:
    Type: AWS::IAM::User

  DeploymentPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Users:
        - !Ref DeploymentUser
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - cloudformation:DescribeChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeStacks
            Resource: !Ref AWS::StackId
          - Effect: Allow
            Action: cloudformation:UpdateStack
            Resource: !Ref AWS::StackId
            Condition:
              StringEquals:
                cloudformation:RoleArn: !GetAtt MainStackRole.Arn
          - Effect: Allow
            Action: cloudformation:CreateChangeSet
            Resource: !Ref AWS::StackId
            Condition:
              StringEquals:
                cloudformation:RoleArn: !GetAtt DiffStackRole.Arn
          - Effect: Allow
            Action:
              - cloudformation:CreateStack
              - cloudformation:UpdateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
            Resource: !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-integration-test-stack/*
          - Effect: Allow
            Action: iam:PassRole
            Resource:
              - !GetAtt IntegrationTestStackRole.Arn
              - !GetAtt DiffStackRole.Arn
              - !GetAtt MainStackRole.Arn
            Condition:
              StringEquals:
                iam:PassedToService: cloudformation
          - Effect: Allow
            Action:
              - cognito-idp:AdminConfirmSignUp
              - cognito-idp:AdminDeleteUser
            Resource: !GetAtt UserPool.Arn
          - Effect: Allow
            Action:
              - s3:GetObjects*
              - s3:PutObjects*
            Resource: !Sub ${Bucket.Arn}/*
          - Effect: Allow
            Action:
              - ec2:StartInstances
              - ec2:StopInstances
              - ec2:DescribeInstances
            Resource: '*'
            Condition:
              StringEquals:
                ec2:ResourceTag/aws:cloudformation:stack-name: !Sub ${AWS::StackName}-integration-test-stack
          - !If
            - DeployCertificates
            - Effect: Allow
              Action: cloudfront:CreateInvalidation
              Resource: !Sub arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${CloudfrontDistribution}
            - !Ref AWS::NoValue

  MainStackRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: cloudformation.amazonaws.com

  MainStackPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
       - !Ref DiffStackRole
       - !Ref MainStackRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - apigateway:*
              - acm:*
              - cloudfront:*
              - route53:CreateHostedZone
              - route53:UpdateHostedZoneComment
              - s3:CreateBucket
              - logs:CreateLogGroup
              - logs:PutRetentionPolicy
              - logs:DeleteRetentionPolicy
              - cognito-idp:CreateUserPool
              - cognito-idp:UpdateUserPool
              - lambda:CreateFunction
            Resource: '*'
          - Effect: Allow
            Action: route53:ChangeResourceRecordSets
            Resource: !Sub arn:${AWS::Partition}:route53:::hostedzone/${HostedZone}
          - Effect: Allow
            Action:
              - s3:PutBucketPolicy
              - s3:DeleteBucketPolicy
            Resource: !GetAtt Bucket.Arn
          - Effect: Allow
            Action:
              - cognito-idp:CreateUserPoolClient
              - cognito-idp:UpdateUserPoolClient
              - cognito-idp:DeleteUserPoolClient
              - cognito-idp:CreateUserPoolDomain
              - cognito-idp:UpdateUserPoolDomain
              - cognito-idp:DeleteUserPoolDomain
              - cognito-idp:SetRiskConfiguration
              - cognito-idp:SetUICustomization
              - congito-idp:SetUserPoolMfaConfig
            Resource: !GetAtt UserPool.Arn
          - !If
            - DeployCertificates
            - Effect: Allow
              Action:
                - lambda:AddPermission
                - lambda:RemovePermission
                - lambda:UpdateFunctionCode
                - lambda:DeleteFunction
                - lambda:UpdateFunctionConfiguration
                - lambda:CreateEventSourceMapping
                - lambda:UpdateEventSourceMapping
                - lambda:DeleteEventSourceMapping
                - lambda:PutFunctionEventInvokeConfig
                - lambda:UpdateFunctionEventInvokeConfig
                - lambda:DeleteFunctionEventInvokeConfig
                - lambda:TagResource
                - lambda:UntagResource
              Resource: !GetAtt DescribeInstancesFunction.Arn
            - !Ref AWS::NoValue

  DiffStackRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: cloudformation.amazonaws.com
      Policies:
        - PolicyName: extraPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:CreateUser
                  - iam:UpdateUser
                  - iam:DeleteUser
                  - iam:CreateRole
                  - iam:UpdateRole
                  - iam:DeleteRole
                  - iam:AttachRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:DetachRolePolicy
                  - iam:AttachUserPolicy
                  - iam:PutRolePolicy
                  - iam:DeleteUserPolicy
                  - iam:DetachUserPolicy
                  - iam:PutUserPolicy
                  - iam:UpdateAssumeRolePolicy
                  - iam:UpdateRoleDescription
                  - logs:DeleteLogGroup
                  - route53:DeleteHosedZone
                Resource: '*'

  IntegrationTestStackRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: cloudformation.amazonaws.com
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:RunInstances
                  - ec2:TerminateInstances
                  - ec2:DescribeInstances
                Resource: '*'
              - Effect: Allow
                Action: ssm:GetParameters
                Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}::parameter/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2

Outputs:
  ApiId:
    Condition: DeployCertificates
    Value: !Ref Api
  SiteDistributionId:
    Value: !Ref CloudfrontDistribution
  UserPoolId:
    Value: !Ref UserPool
  UserPoolClientId:
    Value: !Ref UserPoolClient
  NameServers:
    Value: !Join ["," , !GetAtt HostedZone.NameServers]
  DeploymentUser:
    Value: !Ref DeploymentUser
  MainStackRole:
    Value: !GetAtt MainStackRole.Arn
  DiffStackRole:
    Value: !GetAtt DiffStackRole.Arn
  IntegrationTestStackRole:
    Value: !GetAtt IntegrationTestStackRole.Arn
